type Deposit @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  owner: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Withdraw @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  receiver: Bytes!
  owner: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Borrow @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  receiver: Bytes!
  borrower: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Repay @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  borrower: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Transfer @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  from: Bytes!
  to: Bytes!
  shares: BigInt!
}

type DepositAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  owner: Bytes!
  assets: BigInt!
  fee: BigInt!
}

type WithdrawAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  receiver: Bytes!
  owner: Bytes!
  positionAssets: BigInt!
  assets: BigInt!
}

type BorrowAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  receiver: Bytes!
  borrower: Bytes!
  assets: BigInt!
  fee: BigInt!
}

type RepayAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  borrower: Bytes!
  assets: BigInt!
  debtCovered: BigInt!
}

type Liquidate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  receiver: Bytes!
  borrower: Bytes!
  assets: BigInt!
  collateralMarket: Bytes!
  seizedAssets: BigInt!
}

type Seize @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  liquidator: Bytes!
  borrower: Bytes!
  assets: BigInt!
}

type EarningsAccumulatorSmoothFactorSet @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  earningsAccumulatorSmoothFactor: BigInt!
}

type TreasurySet @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  treasury: Bytes!
  treasuryFeeRate: BigInt!
}

type MarketUpdate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  floatingDepositShares: BigInt!
  floatingAssets: BigInt!
  floatingBorrowShares: BigInt!
  floatingDebt: BigInt!
  earningsAccumulator: BigInt!
}

type FixedEarningsUpdate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  unassignedEarnings: BigInt!
}

type AccumulatorAccrual @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
}

type FloatingDebtUpdate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  utilization: BigInt!
}

type InterestRateModelSet @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  interestRateModel: Bytes!
  fixedCurveA: BigInt!
  fixedCurveB: BigInt!
  fixedMaxUtilization: BigInt!
  floatingCurveA: BigInt!
  floatingCurveB: BigInt!
  floatingMaxUtilization: BigInt!
}

type Account @entity {
  id: ID! # address-market
  address: Bytes!
  market: Bytes!
  borrowShares: BigInt!
  depositShares: BigInt!
  isCollateral: Boolean
  fixedPositions: [FixedPosition!]! @derivedFrom(field: "account")
}

type FixedPosition @entity {
  id: ID! # account-market-maturity-(deposit||borrow)(0||1)
  account: Account!
  amount: BigInt!
  borrow: Boolean!
  maturity: Int!
}

type MarketList @entity {
  id: ID!
  market: Bytes!
  decimals: Int!
  timestamp: Int!
  block: Int!
}

type MarketEnter @entity {
  id: ID!
  account: Bytes!
  market: Bytes!
  timestamp: Int!
  block: Int!
}

type MarketExit @entity {
  id: ID!
  account: Bytes!
  market: Bytes!
  timestamp: Int!
  block: Int!
}

type AdjustFactorSet @entity {
  id: ID!
  market: Bytes!
  adjustFactor: BigInt!
  timestamp: Int!
  block: Int!
}

type LiquidationIncentiveSet @entity {
  id: ID!
  liquidator: BigInt!
  lenders: BigInt!
  timestamp: Int!
  block: Int!
}

type PriceFeedSet @entity {
  id: ID!
  market: Bytes!
  priceFeed: Bytes!
  timestamp: Int!
  block: Int!
}

type Market @entity {
  id: ID! # market
  address: Bytes!
  # global
  timestamp: Int!
  block: Int!
  # MarketUpdate
  lastMarketUpdate: Int
  floatingDepositShares: BigInt
  floatingAssets: BigInt
  floatingBorrowShares: BigInt
  floatingDebt: BigInt
  earningsAccumulator: BigInt
  # FloatingDebtUpdate
  floatingUtilization: BigInt
  lastFloatingDebtUpdate: Int
  # InterestRateModelSet
  interestRateModel: Bytes
  fixedCurveA: BigInt
  fixedCurveB: BigInt
  fixedMaxUtilization: BigInt
  floatingCurveA: BigInt
  floatingCurveB: BigInt
  floatingMaxUtilization: BigInt
  # AccumulatorAccrual
  lastAccumulatorAccrual: Int
  # EarningsAccumulatorSmoothFactorSet
  earningsAccumulatorSmoothFactor: BigInt
  # TreasurySet
  treasury: Bytes
  treasuryFeeRate: BigInt
  # FixedEarningsUpdate
  fixedPools: [FixedPool!] @derivedFrom(field: "market")
  symbol: String
  decimals: Int
}

type FixedPool @entity {
  id: ID! # market-maturity
  market: Market!
  maturity: Int!
  timestamp: Int!
  unassignedEarnings: BigInt!
}
