type Deposit @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  owner: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Withdraw @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  receiver: Bytes!
  owner: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Borrow @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  receiver: Bytes!
  borrower: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Repay @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  caller: Bytes!
  borrower: Bytes!
  assets: BigInt!
  shares: BigInt!
}

type Transfer @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  from: Bytes!
  to: Bytes!
  shares: BigInt!
}

type DepositAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  owner: Bytes!
  assets: BigInt!
  fee: BigInt!
}

type WithdrawAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  receiver: Bytes!
  owner: Bytes!
  assets: BigInt!
  assetsDiscounted: BigInt!
}

type BorrowAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  receiver: Bytes!
  borrower: Bytes!
  assets: BigInt!
  fee: BigInt!
}

type RepayAtMaturity @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  caller: Bytes!
  borrower: Bytes!
  assets: BigInt!
  debtCovered: BigInt!
}

type Liquidate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  receiver: Bytes!
  borrower: Bytes!
  assets: BigInt!
  collateralMarket: Bytes!
  seizedAssets: BigInt!
}

type Seize @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  liquidator: Bytes!
  borrower: Bytes!
  assets: BigInt!
}

type EarningsAccumulatorSmoothFactorSet @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  earningsAccumulatorSmoothFactor: BigInt!
}

type MarketUpdate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  floatingDepositShares: BigInt!
  floatingAssets: BigInt!
  floatingBorrowShares: BigInt!
  floatingDebt: BigInt!
  earningsAccumulator: BigInt!
}

type FixedEarningsUpdate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  maturity: Int!
  unassignedEarnings: BigInt!
}

type AccumulatorAccrual @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
}

type FloatingDebtUpdate @entity {
  id: ID!
  market: Bytes!
  timestamp: Int!
  utilization: BigInt!
}

type FixedParametersSet @entity {
  id: ID!
  timestamp: Int!
  curveA: BigInt!
  curveB: BigInt!
  maxUtilization: BigInt!
  fullUtilization: BigInt!
}

type FloatingParametersSet @entity {
  id: ID!
  timestamp: Int!
  curveA: BigInt!
  curveB: BigInt!
  maxUtilization: BigInt!
  fullUtilization: BigInt!
}
